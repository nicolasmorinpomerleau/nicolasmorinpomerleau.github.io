var sendComment,
  sendUsername,
  sendTel,
  sendMail,
  startBookDate,
  endBookDate,
  interval = 2,
  modal = document.getElementById("myModal"),
  span = document.getElementsByClassName("close")[0];
function query() {
  $.post(
    "https://us-central1-onlinecalendar-a-1579919061066.cloudfunctions.net/FirstCalendar ",
    { Instructions: "getDatesValues" },
    function (e) {
      (id = "5shl6ad2n056oquag39idg64c0@group.calendar.google.com"),
        (endDate = new Date());
      var t = new Date(),
        n = new Date(t.getTime() - 6e4 * t.getTimezoneOffset());
      (n = n.toISOString()),
        console.log("startDate: " + n),
        (function (e, t) {
          var n = (n = (n = new Date(e)).toISOString()).split(".");
          (n = n[0] + "-05:00"),
            (n = new Date(n)),
            t[0] &&
              ((ISOEvents = new Date(t[0].start)),
              (dates = ISOEvents.getDate()));
          eventsDays = [];
          var a = 0,
            o = 5,
            r = 9,
            s = "Free";
          for (; a < 400; ) {
            for (o = 5; o > 0; )
              (s = "Free"),
                (weekEndDay = n.getDay()),
                (0 != weekEndDay && 6 != weekEndDay) || (s = "Busy"),
                eventsDays.push({
                  Year: n.getFullYear(),
                  Month: n.getMonth() + 1,
                  CurrentDay: n.getDate(),
                  Start: r,
                  Occupation: s,
                }),
                (r += interval),
                o--;
            n.setDate(n.getDate() + 1), (r = 9), a++;
          }
          t.forEach(function (e, t) {
            (busyDate = new Date(e.start)),
              (busyDateYear = busyDate.getFullYear()),
              (busyDateMonth = busyDate.getMonth()),
              (busyDateMonth += 1),
              (busyDateDay = busyDate.getDate()),
              (busyDateHours = busyDate.getHours()),
              eventsDays.forEach(function (e, t) {
                e.Year == busyDateYear &&
                  e.Month == busyDateMonth &&
                  e.CurrentDay == busyDateDay &&
                  e.Start == busyDateHours &&
                  (e.Occupation = "Busy");
              });
          }),
            DisplayAvailabilities(eventsDays);
        })(n, e);
    }
  );
}
function DisplayAvailabilities(e) {
  var t = [];
  function n(e, t) {
    return (e = e + "").length < t && (e = "0" + e), e;
  }
  e.map((e, a) => {
    "Free" == e.Occupation &&
      ((year = e.Year.toString().concat("-")),
      (month = n(e.Month, 2)),
      (month = (month = year.concat(month)).concat("-")),
      (day = n(e.CurrentDay, 2)),
      (day = (day = month.concat(day)).concat("T")),
      (hour = n(e.Start, 2)),
      (hour = day.concat(hour)),
      (start = hour.concat(":00:00")),
      (year = e.Year.toString().concat("-")),
      (month = n(e.Month, 2)),
      (month = (month = year.concat(month)).concat("-")),
      (day = n(e.CurrentDay, 2)),
      (hour = e.Start + interval),
      (day = (day = month.concat(day)).concat("T")),
      (hour = n(hour, 2)),
      (hour = day.concat(hour)),
      (end = hour.concat(":00:00")),
      (item = {}),
      (item.title = "Disponible"),
      (item.start = start),
      (item.end = end),
      t.push(item));
  }),
    console.log("eventsAvailabilities: " + JSON.stringify(t)),
    fillCalendar(t);
}
function readDates() {
  $.post(
    "https://us-central1-onlinecalendar-a-1579919061066.cloudfunctions.net/FirstCalendar ",
    { Instructions: "getDatesValues" },
    function (e) {
      var t = [];
      console.log("result: " + JSON.stringify(e)),
        e.map((e, n) => {
          (item = {}),
            (item.title = "Disponible"),
            (item.start = e.start),
            (item.end = e.end),
            t.push(item);
        }),
        console.log("eventsAvailabilities: " + JSON.stringify(t)),
        fillCalendar(t);
    }
  );
}
function insertDates(e) {
  $.post(
    "https://us-central1-onlinecalendar-a-1579919061066.cloudfunctions.net/FirstCalendar ",
    { Instructions: "insertDatesValues", event: e },
    function (e) {
      null != e.dates
        ? alert("got dates! ")
        : alert("Cette date est prise veuillez choisir une autere date.");
    }
  );
}
function CheckAndinsertDates(e) {
  $.post(
    "https://us-central1-onlinecalendar-a-1579919061066.cloudfunctions.net/FirstCalendar ",
    { Instructions: "insertDatesValues", event: e },
    function (e) {
      "booked" == e.updates
        ? alert("Cette date est prise veuillez choisir une autere date.")
        : "notBooked" == e.updates && alert("Votre réservation est confirmée ");
    }
  );
}
document.addEventListener("DOMContentLoaded", function () {
  query();
}),
  (window.onclick = function (e) {
    e.target == modal && (modal.style.display = "none");
  });
var d = new Date(),
  year = d.getFullYear(),
  month = d.getMonth(),
  day = d.getDate(),
  currentDate = new Date(year, month, day + 1);
function fillCalendar(e) {
  var t = document.getElementById("calendar");
  new FullCalendar.Calendar(t, {
    eventClick: function (e) {
      document.getElementById("id01").style.display = "block";
      JSON.stringify(e.event.start);
      function t(e, t) {
        return (e = e + "").length < t && (e = "0" + e), e;
      }
      (date = e.event.start.getDate()),
        (month = e.event.start.getMonth()),
        (month = t((month += 1), 2)),
        (year = e.event.start.getFullYear()),
        (houres = e.event.start.getHours()),
        (houres = t(houres, 2)),
        (minutes = e.event.start.getMinutes()),
        (minutes = t(minutes, 2)),
        (dateHeure =
          date +
          "-" +
          month +
          "-" +
          year +
          " à: " +
          houres +
          "h" +
          minutes +
          ". "),
        (document.getElementById("modalTitle").innerText = dateHeure),
        (startBookDate =
          year +
          "-" +
          month +
          "-" +
          date +
          "T" +
          houres +
          ":" +
          minutes +
          ":00"),
        (houres = parseInt(houres) + 2),
        (endBookDate =
          year +
          "-" +
          month +
          "-" +
          date +
          "T" +
          houres +
          ":" +
          minutes +
          ":00"),
        (e.el.style.borderColor = "red");
    },
    plugins: ["interaction", "timeGrid"],
    header: {
      left: "prev,next today",
      center: "title",
      right: "dayGridMonth,timeGridWeek,timeGridDay,listMonth",
    },
    defaultDate: currentDate,
    navLinks: !0,
    businessHours: { startTime: "08:00", endTime: "18:00" },
    weekends: !1,
    allDaySlot: !1,
    locale: "fr",
    events: e,
  }).render();
}
function bookDate() {
  (service = document.getElementById("Mobility").value),
    (sendComment = document.getElementById("exampleFormControlTextarea2")
      .value),
    (sendUsername = document.getElementById("defaultContactFormName").value),
    (sendMail = document.getElementById("defaultContactFormEmail").value),
    (sendTel = document.getElementById("defaultContactFormTel").value),
    (sendComment =
      "Service: " +
      service +
      " \n ----------- \n " +
      sendComment +
      " \n ----------- \nTél: " +
      sendTel),
    CheckAndinsertDates({
      summary: sendUsername,
      location: sendMail,
      description: sendComment,
      end: { dateTime: endBookDate, timeZone: "America/New_York" },
      start: { dateTime: startBookDate, timeZone: "America/New_York" },
      reminders: {
        useDefault: !1,
        overrides: [
          { method: "email", minutes: 1440 },
          { method: "popup", minutes: 10 },
        ],
      },
    }),
    (document.getElementById("id01").style.display = "none");
}
